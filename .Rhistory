lines(store2$stock,store2$A1,lwd=3,lty=3)
lines(store2$stock,store2$A2,lwd=3,col='grey',lty=3)
legend("topright",legend = c("sp 1", "sp 2","sp2>sp1","sp1>sp2"), col = c("black","grey","black","black"),lwd=2,lty = c(1,1,1,3),bty="n")
store=data.frame(stock=seq(0,200,length.out=30),A1=0,A2=0,J1=0,J2=0)
y0=c(10,200,40,40)
for(i in 1:nrow(store)){
p=c(c(qE1=1.8,s1=0.2,cJ1A1=0.005,cJ1A2=0.006,cJ1J2=0.006,v1=1,h1=6,f1=2,stock1=store$stock[i]),
c(qE2=1.8,s2=0.2,cJ2A2=0.005,cJ2A1=0.006,cJ2J1=0.006,v2=1,h2=6,f2=2,stock2=0))
sim=ode(y=y0,times=times,func=simBiggsQ2,parms=p)
store$A1[i]=sim[nrow(sim),2]
store$A2[i]=sim[nrow(sim),3]
store$J1[i]=sim[nrow(sim),4]
store$J2[i]=sim[nrow(sim),5]
}
store2=data.frame(stock=seq(0,200,length.out=30),A1=0,A2=0,J1=0,J2=0)
y0=c(200,10,40,40)
for(i in 1:nrow(store2)){
p=c(c(qE1=1.8,s1=0.2,cJ1A1=0.005,cJ1A2=0.006,cJ1J2=0.006,v1=1,h1=6,f1=2,stock1=store2$stock[i]),
c(qE2=1.8,s2=0.2,cJ2A2=0.005,cJ2A1=0.006,cJ2J1=0.006,v2=1,h2=6,f2=2,stock2=0))
sim=ode(y=y0,times=times,func=simBiggsQ2,parms=p)
store2$A1[i]=sim[nrow(sim),2]
store2$A2[i]=sim[nrow(sim),3]
store2$J1[i]=sim[nrow(sim),4]
store2$J2[i]=sim[nrow(sim),5]
}
plot(store$stock,store$A1,lwd=3,type='l',ylim=c(0,max(store[,2:3])),ylab = "Abundance",xlab = "Species 1 stocking (no. indv.)", main="harvest 1.8")
lines(store$stock,store$A2,lwd=3,col='grey')
lines(store2$stock,store2$A1,lwd=3,lty=3)
lines(store2$stock,store2$A2,lwd=3,col='grey',lty=3)
legend("topright",legend = c("sp 1", "sp 2","sp2>sp1","sp1>sp2"), col = c("black","grey","black","black"),lwd=2,lty = c(1,1,1,3),bty="n")
store=data.frame(stock=seq(0,200,length.out=30),A1=0,A2=0,J1=0,J2=0)
y0=c(10,200,40,40)
for(i in 1:nrow(store)){
p=c(c(qE1=1.8,s1=0.2,cJ1A1=0.005,cJ1A2=0.009,cJ1J2=0.009,v1=1,h1=6,f1=2,stock1=store$stock[i]),
c(qE2=1.8,s2=0.2,cJ2A2=0.005,cJ2A1=0.009,cJ2J1=0.009,v2=1,h2=6,f2=2,stock2=0))
sim=ode(y=y0,times=times,func=simBiggsQ2,parms=p)
store$A1[i]=sim[nrow(sim),2]
store$A2[i]=sim[nrow(sim),3]
store$J1[i]=sim[nrow(sim),4]
store$J2[i]=sim[nrow(sim),5]
}
store2=data.frame(stock=seq(0,200,length.out=30),A1=0,A2=0,J1=0,J2=0)
y0=c(200,10,40,40)
for(i in 1:nrow(store2)){
p=c(c(qE1=1.8,s1=0.2,cJ1A1=0.005,cJ1A2=0.009,cJ1J2=0.009,v1=1,h1=6,f1=2,stock1=store2$stock[i]),
c(qE2=1.8,s2=0.2,cJ2A2=0.005,cJ2A1=0.009,cJ2J1=0.009,v2=1,h2=6,f2=2,stock2=0))
sim=ode(y=y0,times=times,func=simBiggsQ2,parms=p)
store2$A1[i]=sim[nrow(sim),2]
store2$A2[i]=sim[nrow(sim),3]
store2$J1[i]=sim[nrow(sim),4]
store2$J2[i]=sim[nrow(sim),5]
}
plot(store$stock,store$A1,lwd=3,type='l',ylim=c(0,max(store[,2:3])),ylab = "Abundance",xlab = "Species 1 stocking (no. indv.)", main="harvest 1.8")
lines(store$stock,store$A2,lwd=3,col='grey')
lines(store2$stock,store2$A1,lwd=3,lty=3)
lines(store2$stock,store2$A2,lwd=3,col='grey',lty=3)
legend("topright",legend = c("sp 1", "sp 2","sp2>sp1","sp1>sp2"), col = c("black","grey","black","black"),lwd=2,lty = c(1,1,1,3),bty="n")
####################################################
# Functions used to interact with the MFE database #
####################################################
# JAZ; 2015-11-30
# SEJ; 2018-09-14
# load required packages
#***********************
library(RSQLite)
# let R find the MFE database files by setting the path
#******************************************************
dbdir=file.path("C:/Users/jones/BoxSync/NDstuff/ND_R/")  # fpath - file path of database file location
db="MFEdb.db"  # dbname - name of database, default is 'MFEdb.db'
# defining functions for interaction with MFE database
#*****************************************************
# listing table names in MFE database
dbTableList<-function(fpath=dbdir,dbname=db){
drv=SQLite() #create driver object
con=dbConnect(drv,dbname=file.path(fpath,dbname)) #open database connection
#list tables in database
tables=dbListTables(con)
dbDisconnect(con)
return(tables)
}
# listing column names in a MFE database table
dbTableSummary<-function(table,cols=c("lakeID","depthClass"),fpath=dbdir,dbname=db){
table=as.character(table)
drv=SQLite() #create driver object
con=dbConnect(drv,dbname=file.path(fpath,dbname)) #open database connection
#query an entire table
table<-dbGetQuery(con,paste("SELECT * FROM", table)) #note that capitalization doesn't matter so LAKES=lakes
###alter column classes within tables
dateFix=c("dateSet", "dateSample", "dateRun" )
dateTimeFix=c("dateTimeSet", "dateTimeSample")
numericFix=c("benthicBacterialProductionVolume_ugC_L_h","benthicBacterialProductionArea_mgC_m2_h","incubationDuration_h","BacterialProduction_ugC_L_h","depthTop","depthBottom","bodyLength","headWidth","dryMass","chl","abs440","g440","DOC","TN_DOC","dietItemCount","dietItemBodyLength","dietItemHeadWidth","otherLength","dietItemRangeLower","dietItemRangeHigher","dryMass_bodylength","dryMass_headwidth","dryMass_other","totalDryMass","fishLength","fishWeight","mortality","removed","otolithSample","tissueSampled","dietSampled","gonadRemoved","leftEyeRemoved","photo","gonadWeight","gonadSqueze","annulusNumber","paramValue","interpretationNumber","effort","CH4PeakArea","CO2PeakArea","CH4ppm","CO2ppm","CH4_uM","CO2_uM","sampleWt","d13C","d15N","d2H","d18O","percentC","percentN","percentH","surfaceArea","maxDepth","lat","long","temp","DOmgL","DOsat","SpC","pH","ORP","PAR","parameterValue","lakeLevel_m","wellLevel_m","wellLevelCorrected_m","hydraulicHead_m","wellHeightAboveGround_m","waterTable_m","filterVol","sampleAmount","POC","PON","benthicRespiration_mgC_m2_h","benthicNPP_mgC_m2_h","benthicGPP_mgC_m2_h","ppb","rhodReleaseVolume","wetMass","ashedMass","percentOrganic","waterHeight","waterHeight_m","tPOCdepGreater35_mgC_m2_d","tPOCdepLess35_mgC_m2_d","count","abundance_num_m3","biomass_gDryMass_m3","slope","intercept","length","width","mass","eggs","production","prodSD","seasonalSD","production_m3","prodSD_m3","seasonalSD_m3","production_eggRatio","wtEmpty","wtFull","wtSubsample")
integerFix=c("flag")
factorFix=c("replicate")
for(i in which(colnames(table) %in% dateFix)) {
table[,i] <- as.Date(table[,i],tz="America/Chicago")
}
for(i in which(colnames(table) %in% dateTimeFix)) {
table[,i] <- as.POSIXct(table[,i],tz="America/Chicago")
}
for(i in which(colnames(table) %in% numericFix)) {
table[,i] <- as.numeric(table[,i])
}
for(i in which(colnames(table) %in% integerFix)) {
table[,i] <- as.integer(table[,i])
}
for(i in which(colnames(table) %in% factorFix)) {
table[,i] <- as.factor(table[,i])
}
#summarize table
summary=list()
for(i in 1:length(cols)){
print(paste(cols[i]," - ",typeof(table[,cols[i]]),":",sep=""),quote=FALSE)
print(sort(unique(table[,cols[i]])),quote=FALSE)
}
dbDisconnect(con)
}
# Importing database tables
dbTable<-function(table,lakeID=c(),depthClass=c(),fpath=dbdir,dbname=db){
#set file path to the location of the database (defaults to my database location)
table=as.character(table)
drv=SQLite() #create driver object
con=dbConnect(drv,dbname=file.path(fpath,dbname)) #open database connection
#query an entire table
table<-dbGetQuery(con,paste("SELECT * FROM", table)) #note that capitalization doesn't matter so LAKES=lakes
if(!is.null(lakeID)){
table<-table[table$lakeID%in%lakeID,]
}
if(!is.null(depthClass)){
table<-table[table$depthClass%in%depthClass,]
}
###alter column classes within tables
dateFix=c("dateSet", "dateSample", "dateRun" )
dateTimeFix=c("dateTimeSet", "dateTimeSample")
numericFix=c("benthicBacterialProductionVolume_ugC_L_h","benthicBacterialProductionArea_mgC_m2_h","incubationDuration_h","BacterialProduction_ugC_L_h","depthTop","depthBottom","bodyLength","headWidth","dryMass","chl","abs440","g440","DOC","TN_DOC","dietItemCount","dietItemBodyLength","dietItemHeadWidth","otherLength","dietItemRangeLower","dietItemRangeHigher","dryMass_bodylength","dryMass_headwidth","dryMass_other","totalDryMass","fishLength","fishWeight","mortality","removed","otolithSample","tissueSampled","dietSampled","gonadRemoved","leftEyeRemoved","photo","gonadWeight","gonadSqueze","annulusNumber","paramValue","interpretationNumber","effort","CH4PeakArea","CO2PeakArea","CH4ppm","CO2ppm","CH4_uM","CO2_uM","sampleWt","d13C","d15N","d2H","d18O","percentC","percentN","percentH","surfaceArea","maxDepth","lat","long","temp","DOmgL","DOsat","SpC","pH","ORP","PAR","parameterValue","lakeLevel_m","wellLevel_m","wellLevelCorrected_m","hydraulicHead_m","wellHeightAboveGround_m","waterTable_m","filterVol","sampleAmount","POC","PON","benthicRespiration_mgC_m2_h","benthicNPP_mgC_m2_h","benthicGPP_mgC_m2_h","ppb","rhodReleaseVolume","wetMass","ashedMass","percentOrganic","waterHeight","waterHeight_m","tPOCdepGreater35_mgC_m2_d","tPOCdepLess35_mgC_m2_d","count","abundance_num_m3","biomass_gDryMass_m3","slope","intercept","length","width","mass","eggs","production","prodSD","seasonalSD","production_m3","prodSD_m3","seasonalSD_m3","production_eggRatio","wtEmpty","wtFull","wtSubsample")
integerFix=c("flag")
factorFix=c("replicate")
for(i in which(colnames(table) %in% dateFix)) {
table[,i] <- as.Date(table[,i],tz="America/Chicago")
}
for(i in which(colnames(table) %in% dateTimeFix)) {
table[,i] <- as.POSIXct(table[,i],tz="America/Chicago")
}
for(i in which(colnames(table) %in% numericFix)) {
table[,i] <- as.numeric(table[,i])
}
for(i in which(colnames(table) %in% integerFix)) {
table[,i] <- as.integer(table[,i])
}
for(i in which(colnames(table) %in% factorFix)) {
table[,i] <- as.factor(table[,i])
}
return(table)
}
setwd("C:/Users/jones/Downloads")
?read.csv
df=read.table("remaning_dup_fishIDs.txt", header = T,sep = ',',stringsAsFactors = F)
df=read.table("remaining_dup_fishIDs.txt", header = T,sep = ',',stringsAsFactors = F)
View(df)
getwd()
setwd("C:/Users/jones/BoxSync/NDstuff/Dissertation/2/scripts_data/")
nabYr=read.csv("fullNAB_PE.csv", header = T, stringsAsFactors = F)
colnames(nabYr)=c("year", "pe","L.CI","U.CI","urec")
nabYr[18,5]=0.15; nabYr[23,5]=0.083; nabYr[20:21,5]=0.13 #interpolating the few years without data
nabYr=full_join(nabYr,nabFyke)%>%
full_join(nabAN)
library(BayesianTools)
library(dplyr)
rm(list=ls())
#### OBSERVED DATA ####
nab=read.csv("nabData_modelFormat.csv", stringsAsFactors = F)
#plot(nab$year, nab$lengths_cm)
#getting sample counts for obs model input
nabFyke=nab%>%
filter(method==2 | method=="fyke" | is.na(method)==T)%>%
group_by(year)%>%
summarize(numObs=n(), sumSQL=sum(length_cm^2))
yearsAN=data.frame(year=1956:2015)
nabAN=nab%>%
filter(method==1 | is.na(method)==T)%>%
group_by(year)%>%
summarize(numObsAN=n(), sumSQLAN=sum(length_cm^2))%>%
full_join(yearsAN)%>%
arrange(year)
#setting the few mising years draws to 0
nabFyke$numObs[c(18,20,21,23)]=0
#trimming individual fish data to year, length, age columns I care about for likelihood
i.obs=nab%>%
filter(method==2 | method=="fyke" | is.na(method)==T)%>%
select(year, length_cm, age)
#exploitation rates & PEs
nabYr=read.csv("fullNAB_PE.csv", header = T, stringsAsFactors = F)
colnames(nabYr)=c("year", "pe","L.CI","U.CI","urec")
nabYr[18,5]=0.15; nabYr[23,5]=0.083; nabYr[20:21,5]=0.13 #interpolating the few years without data
nabYr=full_join(nabYr,nabFyke)%>%
full_join(nabAN)
nabYr$numObsAN[is.na(nabYr$numObsAN)==T]=0
nabYr=nabYr[nabYr$year!=2016,]
colnames(nabYr)
plot(nabYr$year, nabYr$pe, xlab = "Year", ylab = "PE")
plot(nabYr$year, nabYr$pe, xlab = "Year", ylab = "PE", pch=16)
par(mar=c(5,4,4,4))
plot(nabYr$year, nabYr$pe, xlab = "Year", ylab = "PE", pch=16)
par(new=T)
plot(nabYr$year, nabYr$sumSQL, pch=16, col="red", axes = F, xlab = "", ylab = "")
axis(side = 4)
mtext("sum sq length", side = 4)
mtext("sum sq length", side = 4, line = 3)
mtext("sum sq length", side = 4, line = 2)
plot(nabYr$pe, nabYr$sumSQL, xlab = "PE", ylab = "sum sq length")
plot(nabYr$pe, nabYr$sumSQL, xlab = "PE", ylab = "sum sq length", pch=16)
par(mar=c(5,4,4,4))
plot(nabYr$year, nabYr$pe, xlab = "Year", ylab = "PE", pch=16)
par(new=T)
plot(nabYr$year, nabYr$sumSQL, pch=16, col="red", axes = F, xlab = "", ylab = "")
axis(side = 4)
mtext("sum sq length", side = 4, line = 2)
par(mar=c(5,4,4,4))
plot(nabYr$year, nabYr$pe, xlab = "Year", ylab = "PE", pch=16)
par(new=T)
plot(nabYr$year, nabYr$sumSQL, pch=16, col="red", axes = F, xlab = "", ylab = "")
axis(side = 4)
mtext("sum sq length", side = 4, line = 2)
legend("topleft", legend = c("PE","sumsqL"), pch=16, col = c("black","red"))
par(new=T)
plot(nabYr$pe, nabYr$sumSQL, xlab = "PE", ylab = "sum sq length", pch=16)
par(new=F)
plot(nabYr$pe, nabYr$sumSQL, xlab = "PE", ylab = "sum sq length", pch=16)
dev.off()
plot(nabYr$pe, nabYr$sumSQL, xlab = "PE", ylab = "sum sq length", pch=16)
View(nabYr)
nabYr$peSource=c(rep("hoff&serns",26), rep(NA,5),rep("newNAB",28))
nabYr$peSource=c(rep("hoff&serns",26), rep(NA,5),rep("newNAB",29))
p=ggplot(nabYr)
library(ggplot2)
p=ggplot(nabYr)
p=ggplot(nabYr)+theme_classic()
p+geom_point(aes(x=PE,y=sumSQL,fill=peSource))
p+geom_point(aes(x=pe,y=sumSQL,fill=peSource))
p+geom_point(aes(x=pe,y=sumSQL),fill=peSource)
p+geom_point(aes(x=pe,y=sumSQL),color=peSource)
colnames(nabYr)
p+geom_point(aes(x=pe,y=sumSQL),fill=peSource)
p=ggplot(nabYr)+theme_classic()
p+geom_point(aes(x=pe,y=sumSQL),fill=peSource)
p+geom_point(aes(x=pe,y=sumSQL,fill=peSource))
p+geom_point(aes(x=pe,y=sumSQL,fill=peSource),color=c("black","red","blue"))
p+geom_point(aes(x=pe,y=sumSQL,fill=factor(peSource)))
p+geom_point(aes(x=pe,y=sumSQL,color=factor(peSource)))
p+geom_point(aes(x=pe,y=sumSQL,color=factor(peSource)))+theme(legend.position = "bottom")
install.packages('rmarkdown')
library('rmarkdown')
setwd("C:/Users/jones/BoxSync/NDstuff/Dissertation/4/MultiSppModel/")
library(deSolve)
rm(list=ls())
?approxfun
plot(times, rep(1.8,times))
#parameter definitions
# qE - harvest, species specific
# s - survial, species specific
# cJA - effect of adults of a given species on juveniles of a given species (cover cannibalism or interspecific predation)
# cJJ - effect of juveniles of one species on juveniles of the other (can be predation or competition)
# h - rate at which juveniles leave foraging arena for refuge, species specific
# v - rate at which juveniles enter foraging arena from refuge, species specific
# f - fecundity, species specific
times=1:500
qeFun=approxfun(x=times,y=rep(1.8,times),xout=times)
qeFun=approxfun(x=times,y=rep(1.8,times))
qeFun=approxfun(x=times,y=rep(1.8,times=times))
#parameter definitions
# qE - harvest, species specific
# s - survial, species specific
# cJA - effect of adults of a given species on juveniles of a given species (cover cannibalism or interspecific predation)
# cJJ - effect of juveniles of one species on juveniles of the other (can be predation or competition)
# h - rate at which juveniles leave foraging arena for refuge, species specific
# v - rate at which juveniles enter foraging arena from refuge, species specific
# f - fecundity, species specific
tstep=1:500
qeFun=approxfun(x=times,y=rep(1.8,times=tstep))
qeFun=approxfun(x=times,y=rep(1.8,length(tstep)))
qeFun(40)
qeFun(40)500
qeFun(500)
qeFun(501)
qeFun(50)
qe1Fun=approxfun(x=tstep,y=rep(1.8,length(tstep)))
h1Fun=approxfun(x=tstep,y=rep(6,length(tstep)))
qe2Fun=approxfun(x=tstep,y=rep(1.8,length(tstep)))
h2Fun=approxfun(x=tstep,y=rep(6,length(tstep)))
simBiggs<-function(t,y,params){
A1<-y[1]
A2<-y[2]
J1<-y[3]
J2<-y[4]
with(as.list(params),{
dA1dt=-qE1Fun(t)*A1+(s1-1)*A1+s1*J1
dA2dt=-qE2Fun(t)*A2+(s2-1)*A2+s2*J2
dJ1dt=-cJ1A1*J1*A1-cJ1J2*J2*J1-(cJ1A2*v1*A2*J1)/(h1Fun(t)+v1+cJ1A2*A2)+f1*A1
dJ2dt=-cJ2A2*J2*A2-cJ2J1*J1*J2-(cJ2A1*v2*A1*J2)/(h2Fun(t)+v2+cJ2A1*A1)+f2*A2
return(list(c(dA1dt,dA2dt,dJ1dt,dJ2dt)))
})
}
p=c(s1=0.5,cJ1A1=0.008,cJ1A2=0.003,cJ1J2=0.001,v1=1,f1=2,
s2=0.5,cJ2A2=0.008,cJ2A1=0.003,cJ2J1=0.001,v2=1,f2=2)
y0=c(50,20,10,10)
sim=ode(y=y0,times=tstep,func=simBiggs,parms=p)
qE1Fun=approxfun(x=tstep,y=rep(1.8,length(tstep)))
h1Fun=approxfun(x=tstep,y=rep(6,length(tstep)))
qE2Fun=approxfun(x=tstep,y=rep(1.8,length(tstep)))
h2Fun=approxfun(x=tstep,y=rep(6,length(tstep)))
sim=ode(y=y0,times=tstep,func=simBiggs,parms=p)
sim[nrow(sim),]
plot(sim[,1],sim[,2],type='l',ylim=c(0,max(sim[,2:5])))
lines(sim[,1],sim[,3],col="blue")
lines(sim[,1],sim[,4],lty=2)
lines(sim[,1],sim[,5],lty=2,col="blue")
head(sim)
tail(sim)
length(tstep)
plot(sim[,1],sim[,2],type='l',ylim=c(0,max(sim[,2:5])))
plot(sim[,1],sim[,2],type='l',ylim=c(0,max(sim[,2:5],na.rm = T)))
lines(sim[,1],sim[,3],col="blue")
lines(sim[,1],sim[,4],lty=2)
lines(sim[,1],sim[,5],lty=2,col="blue")
simBiggs<-function(t,y,params){
A1<-y[1]
A2<-y[2]
J1<-y[3]
J2<-y[4]
with(as.list(params),{
dA1dt=-qE1Fun(t)*A1+(s1-1)*A1+s1*J1
dA2dt=-qE2Fun(t)*A2+(s2-1)*A2+s2*J2
dJ1dt=-cJ1A1*J1*A1-cJ1J2*J2*J1-(cJ1A2*v1*A2*J1)/(h1Fun(t)+v1+cJ1A2*A2)+f1*A1
dJ2dt=-cJ2A2*J2*A2-cJ2J1*J1*J2-(cJ2A1*v2*A1*J2)/(h2Fun(t)+v2+cJ2A1*A1)+f2*A2
return(list(c(dA1dt,dA2dt,dJ1dt,dJ2dt,qE1Fun(t),qE2Fun(t))))
})
}
p=c(s1=0.5,cJ1A1=0.008,cJ1A2=0.003,cJ1J2=0.001,v1=1,f1=2,
s2=0.5,cJ2A2=0.008,cJ2A1=0.003,cJ2J1=0.001,v2=1,f2=2)
y0=c(50,20,10,10)
sim=ode(y=y0,times=tstep,func=simBiggs,parms=p)
simBiggs<-function(t,y,params){
A1<-y[1]
A2<-y[2]
J1<-y[3]
J2<-y[4]
with(as.list(params),{
dA1dt=-qE1Fun(t)*A1+(s1-1)*A1+s1*J1
dA2dt=-qE2Fun(t)*A2+(s2-1)*A2+s2*J2
dJ1dt=-cJ1A1*J1*A1-cJ1J2*J2*J1-(cJ1A2*v1*A2*J1)/(h1Fun(t)+v1+cJ1A2*A2)+f1*A1
dJ2dt=-cJ2A2*J2*A2-cJ2J1*J1*J2-(cJ2A1*v2*A1*J2)/(h2Fun(t)+v2+cJ2A1*A1)+f2*A2
return(list(c(dA1dt,dA2dt,dJ1dt,dJ2dt)))
})
}
qE1Fun=approxfun(x=tstep,y=1:5)
h1Fun=approxfun(x=tstep,y=rep(6,length(tstep)))
qE2Fun=approxfun(x=tstep,y=1:5)
h2Fun=approxfun(x=tstep,y=rep(6,length(tstep)))
qE1Fun=approxfun(x=tstep,y=seq(0,5,length.out = length(tstep)))
h1Fun=approxfun(x=tstep,y=rep(6,length(tstep)))
qE2Fun=approxfun(x=tstep,y=seq(0,5,length.out = length(tstep)))
h2Fun=approxfun(x=tstep,y=rep(6,length(tstep)))
simBiggs<-function(t,y,params){
A1<-y[1]
A2<-y[2]
J1<-y[3]
J2<-y[4]
with(as.list(params),{
dA1dt=-qE1Fun(t)*A1+(s1-1)*A1+s1*J1
dA2dt=-qE2Fun(t)*A2+(s2-1)*A2+s2*J2
dJ1dt=-cJ1A1*J1*A1-cJ1J2*J2*J1-(cJ1A2*v1*A2*J1)/(h1Fun(t)+v1+cJ1A2*A2)+f1*A1
dJ2dt=-cJ2A2*J2*A2-cJ2J1*J1*J2-(cJ2A1*v2*A1*J2)/(h2Fun(t)+v2+cJ2A1*A1)+f2*A2
return(list(c(dA1dt,dA2dt,dJ1dt,dJ2dt)))
})
}
p=c(s1=0.5,cJ1A1=0.008,cJ1A2=0.003,cJ1J2=0.001,v1=1,f1=2,
s2=0.5,cJ2A2=0.008,cJ2A1=0.003,cJ2J1=0.001,v2=1,f2=2)
y0=c(50,20,10,10)
sim=ode(y=y0,times=tstep,func=simBiggs,parms=p)
sim[nrow(sim),]
plot(sim[,1],sim[,2],type='l',ylim=c(0,max(sim[,2:5],na.rm = T)))
lines(sim[,1],sim[,3],col="blue")
lines(sim[,1],sim[,4],lty=2)
lines(sim[,1],sim[,5],lty=2,col="blue")
qE1Fun=approxfun(x=tstep,y=seq(0,5,length.out = length(tstep)))
qE2Fun=approxfun(x=tstep,y=seq(0,5,length.out = length(tstep)))
#qE1Fun=approxfun(x=tstep,y=rep(1.8, length(tstep)))
#qE2Fun=approxfun(x=tstep,y=rep(1.8, length(tstep)))
h1Fun=approxfun(x=tstep,y=seq(0,10,length.out = length(tstep)))
h2Fun=approxfun(x=tstep,y=seq(0,10,length.out = length(tstep)))
#h1Fun=approxfun(x=tstep,y=rep(6,length(tstep)))
#h2Fun=approxfun(x=tstep,y=rep(6,length(tstep)))
p=c(s1=0.5,cJ1A1=0.008,cJ1A2=0.003,cJ1J2=0.001,v1=1,f1=2,
s2=0.5,cJ2A2=0.008,cJ2A1=0.003,cJ2J1=0.001,v2=1,f2=2)
y0=c(50,20,10,10)
sim=ode(y=y0,times=tstep,func=simBiggs,parms=p)
plot(sim[,1],sim[,2],type='l',ylim=c(0,max(sim[,2:5],na.rm = T)))
lines(sim[,1],sim[,3],col="blue")
lines(sim[,1],sim[,4],lty=2)
lines(sim[,1],sim[,5],lty=2,col="blue")
qE1Fun=approxfun(x=tstep,y=rep(1.8, length(tstep)))
qE2Fun=approxfun(x=tstep,y=rep(1.8, length(tstep)))
h1Fun=approxfun(x=tstep,y=seq(0,10,length.out = length(tstep)))
h2Fun=approxfun(x=tstep,y=seq(0,10,length.out = length(tstep)))
#h1Fun=approxfun(x=tstep,y=rep(6,length(tstep)))
#h2Fun=approxfun(x=tstep,y=rep(6,length(tstep)))
sim=ode(y=y0,times=tstep,func=simBiggs,parms=p)
sim[nrow(sim),]
plot(sim[,1],sim[,2],type='l',ylim=c(0,max(sim[,2:5],na.rm = T)))
lines(sim[,1],sim[,3],col="blue")
lines(sim[,1],sim[,4],lty=2)
lines(sim[,1],sim[,5],lty=2,col="blue")
qE1Fun=approxfun(x=tstep,y=seq(0,5,length.out = length(tstep)))
# qE2Fun=approxfun(x=tstep,y=seq(0,5,length.out = length(tstep)))
# qE1Fun=approxfun(x=tstep,y=rep(1.8, length(tstep)))
qE2Fun=approxfun(x=tstep,y=rep(0, length(tstep)))
# h1Fun=approxfun(x=tstep,y=seq(0,10,length.out = length(tstep)))
# h2Fun=approxfun(x=tstep,y=seq(0,10,length.out = length(tstep)))
h1Fun=approxfun(x=tstep,y=rep(6,length(tstep)))
h2Fun=approxfun(x=tstep,y=rep(6,length(tstep)))
sim=ode(y=y0,times=tstep,func=simBiggs,parms=p)
sim[nrow(sim),]
plot(sim[,1],sim[,2],type='l',ylim=c(0,max(sim[,2:5],na.rm = T)))
lines(sim[,1],sim[,3],col="blue")
lines(sim[,1],sim[,4],lty=2)
y0=c(100,5,0,0)
sim=ode(y=y0,times=tstep,func=simBiggs,parms=p)
plot(sim[,1],sim[,2],type='l',ylim=c(0,max(sim[,2:5],na.rm = T)))
lines(sim[,1],sim[,3],col="blue")
qE1Fun=approxfun(x=tstep,y=seq(0,3,length.out = length(tstep)))
sim=ode(y=y0,times=tstep,func=simBiggs,parms=p)
sim[nrow(sim),]
plot(sim[,1],sim[,2],type='l',ylim=c(0,max(sim[,2:5],na.rm = T)))
lines(sim[,1],sim[,3],col="blue")
lines(sim[,1],sim[,4],lty=2)
lines(sim[,1],sim[,5],lty=2,col="blue")
qE1Fun=approxfun(x=tstep,y=c(seq(0,3,length.out = length(100)),rep(0,400)))
length(c(seq(0,3,length.out = length(100)),rep(0,400)))
length(c(seq(0,3,length.out = 100),rep(0,400)))
qE1Fun=approxfun(x=tstep,y=c(seq(0,3,length.out = 100),rep(0,400)))
sim=ode(y=y0,times=tstep,func=simBiggs,parms=p)
sim[nrow(sim),]
plot(sim[,1],sim[,2],type='l',ylim=c(0,max(sim[,2:5],na.rm = T)))
lines(sim[,1],sim[,3],col="blue")
p=c(s1=0.5,cJ1A1=0.008,cJ1A2=0.003,cJ1J2=0.000,v1=1,f1=2,
s2=0.5,cJ2A2=0.008,cJ2A1=0.003,cJ2J1=0.001,v2=1,f2=2)
y0=c(100,5,0,0)
sim=ode(y=y0,times=tstep,func=simBiggs,parms=p)
plot(sim[,1],sim[,2],type='l',ylim=c(0,max(sim[,2:5],na.rm = T)))
lines(sim[,1],sim[,3],col="blue")
qE1Fun=approxfun(x=tstep,y=c(seq(0,5,length.out = 100),rep(0,400)))
sim=ode(y=y0,times=tstep,func=simBiggs,parms=p)
sim[nrow(sim),]
plot(sim[,1],sim[,2],type='l',ylim=c(0,max(sim[,2:5],na.rm = T)))
lines(sim[,1],sim[,3],col="blue")
qE1Fun=approxfun(x=tstep,y=c(seq(0,10,length.out = 100),rep(0,400)))
sim=ode(y=y0,times=tstep,func=simBiggs,parms=p)
sim[nrow(sim),]
plot(sim[,1],sim[,2],type='l',ylim=c(0,max(sim[,2:5],na.rm = T)))
lines(sim[,1],sim[,3],col="blue")
lines(sim[,1],sim[,4],lty=2)
qE1Fun=approxfun(x=tstep,y=c(seq(0,3,length.out = 300),rep(0,200)))
sim=ode(y=y0,times=tstep,func=simBiggs,parms=p)
sim[nrow(sim),]
plot(sim[,1],sim[,2],type='l',ylim=c(0,max(sim[,2:5],na.rm = T)))
lines(sim[,1],sim[,3],col="blue")
p=c(s1=0.5,cJ1A1=0.002,cJ1A2=0.003,cJ1J2=0.000,v1=1,f1=2,
s2=0.5,cJ2A2=0.002,cJ2A1=0.003,cJ2J1=0.001,v2=1,f2=2)
y0=c(100,5,0,0)
sim=ode(y=y0,times=tstep,func=simBiggs,parms=p)
sim[nrow(sim),]
plot(sim[,1],sim[,2],type='l',ylim=c(0,max(sim[,2:5],na.rm = T)))
lines(sim[,1],sim[,3],col="blue")
qE1Fun=approxfun(x=tstep,y=c(seq(0,10,length.out = 300),rep(0,200)))
sim=ode(y=y0,times=tstep,func=simBiggs,parms=p)
sim[nrow(sim),]
plot(sim[,1],sim[,2],type='l',ylim=c(0,max(sim[,2:5],na.rm = T)))
lines(sim[,1],sim[,3],col="blue")
y0=c(100,2,0,0)
sim=ode(y=y0,times=tstep,func=simBiggs,parms=p)
sim[nrow(sim),]
plot(sim[,1],sim[,2],type='l',ylim=c(0,max(sim[,2:5],na.rm = T)))
lines(sim[,1],sim[,3],col="blue")
p=c(s1=0.5,cJ1A1=0.002,cJ1A2=0.003,cJ1J2=0.000,v1=1,f1=2,
s2=0.5,cJ2A2=0.002,cJ2A1=0.003,cJ2J1=0.003,v2=1,f2=2)
sim=ode(y=y0,times=tstep,func=simBiggs,parms=p)
plot(sim[,1],sim[,2],type='l',ylim=c(0,max(sim[,2:5],na.rm = T)))
sim[nrow(sim),]
lines(sim[,1],sim[,3],col="blue")
p=c(s1=0.5,cJ1A1=0.002,cJ1A2=0.003,cJ1J2=0.003,v1=1,f1=2,
s2=0.5,cJ2A2=0.002,cJ2A1=0.003,cJ2J1=0.000,v2=1,f2=2)
y0=c(100,2,0,0)
sim=ode(y=y0,times=tstep,func=simBiggs,parms=p)
sim[nrow(sim),]
plot(sim[,1],sim[,2],type='l',ylim=c(0,max(sim[,2:5],na.rm = T)))
lines(sim[,1],sim[,3],col="blue")
head(sim)
View(sim)
qE1Fun=approxfun(x=tstep,y=c(seq(0,10,length.out = 20),rep(0,480)))
sim=ode(y=y0,times=tstep,func=simBiggs,parms=p)
sim[nrow(sim),]
plot(sim[,1],sim[,2],type='l',ylim=c(0,max(sim[,2:5],na.rm = T)))
lines(sim[,1],sim[,3],col="blue")
qE1Fun=approxfun(x=tstep,y=c(seq(0,10,length.out = 10),rep(0,490)))
sim=ode(y=y0,times=tstep,func=simBiggs,parms=p)
sim[nrow(sim),]
plot(sim[,1],sim[,2],type='l',ylim=c(0,max(sim[,2:5],na.rm = T)))
lines(sim[,1],sim[,3],col="blue")
qE1Fun=approxfun(x=tstep,y=c(seq(0,10,length.out = 5),rep(0,495)))
sim=ode(y=y0,times=tstep,func=simBiggs,parms=p)
sim[nrow(sim),]
plot(sim[,1],sim[,2],type='l',ylim=c(0,max(sim[,2:5],na.rm = T)))
lines(sim[,1],sim[,3],col="blue")
